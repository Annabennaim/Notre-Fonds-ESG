#bibliotheques:

import streamlit as st
import numpy as np
import pandas as pd
from yahooquery import Ticker
import yfinance as yf
import os
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import re


st.title("Analyse et Optimisation ESG de notre Fonds ")

st.write("""
Bienvenue sur notre outil d‚Äôanalyse ESG.
Dans ce projet, nous avons choisi de partir d‚Äôun fonds d‚Äôinvestissement d√©j√† existant afin d‚Äô√©valuer sa performance selon des crit√®res environnementaux, sociaux et de gouvernance (ESG).
Il s'agit du fonds indiciel cot√© iShares MSCI World SRI UCITS ETF, con√ßu pour offrir aux investisseurs une exposition aux actions mondiales respectant des crit√®res ESG rigoureux.


Notre objectif est double :
1. **Mesurer le score ESG moyen du fonds dans son ensemble** pour avoir une premi√®re id√©e de sa performance globale.
2. **Analyser le score ESG moyen par secteur d‚Äôactivit√©** pour identifier les secteurs les plus vertueux, mais aussi ceux qui p√©nalisent le score global.


Enfin, dans un troisi√®me temps, en rep√©rant le ou les secteurs ayant les scores ESG les plus faibles, nous pourrons proposer des ajustements dans la composition du portefeuille afin d‚Äô**am√©liorer son profil ESG** tout en maintenant une diversification coh√©rente.
Par ailleurs, cette analyse nous permettra de challenger les hypoth√®ses du fonds choisi.
""")

st.markdown("<b><u>1√®re partie : Analyse globale de notre fonds :</u></b>", unsafe_allow_html=True)

# Upload du fichier 
uploaded_file = st.file_uploader("Chargez votre fichier Excel (.xlsm)", type=["xls", "xlsx", "xlsm"]) 

if uploaded_file is not None: 
    try: 
        df_positions = pd.read_excel(uploaded_file, engine='openpyxl', skiprows=7) 
        st.success("‚úÖ Fichier charg√© avec succ√®s !") 
        st.subheader("Aper√ßu des donn√©es") 
        st.dataframe(df_positions.head()) 
    except Exception as e:    
        st.error(f"Erreur lors de la lecture du fichier : {e}")


# Nettoyage
df_clean = df_positions[['Ticker', 'Nom', 'Secteur', 'Lieu', 'Pond√©ration (%)']].dropna()


# Filtres
st.sidebar.header("Filtres d'affichage")


secteurs = df_clean['Secteur'].unique().tolist()
secteurs_selectionnes = st.sidebar.multiselect("Secteurs :", secteurs, default=secteurs)


lieux = df_clean['Lieu'].unique().tolist()
lieux_selectionnes = st.sidebar.multiselect("Pays :", lieux, default=lieux)


df_filtr√© = df_clean[
    (df_clean['Secteur'].isin(secteurs_selectionnes)) &
    (df_clean['Lieu'].isin(lieux_selectionnes))
]


if df_filtr√©.empty:
    st.warning("Aucune donn√©e correspondante aux filtres s√©lectionn√©s.")
else:


    st.subheader("R√©partition par Pays üåç")
    # Regrouper les pays avec moins de 1% sous "Autres"
    pays = df_filtr√©.groupby('Lieu')['Pond√©ration (%)'].sum().reset_index()
    seuil = 1  # seuil en pourcentage


# S√©parer les pays majeurs et mineurs
    pays_majeurs = pays[pays['Pond√©ration (%)'] >= seuil]
    pays_mineurs = pays[pays['Pond√©ration (%)'] < seuil]


# Ajouter ligne "Autres"
    if not pays_mineurs.empty:
        autres = pd.DataFrame({
            'Lieu': ['Autres'],
            'Pond√©ration (%)': [pays_mineurs['Pond√©ration (%)'].sum()]
        })
        pays = pd.concat([pays_majeurs, autres], ignore_index=True)


# Pie chart avec regroupement
    fig_pays = px.pie(
        pays,
        values='Pond√©ration (%)',
        names='Lieu',
        title='R√©partition g√©ographique du portefeuille',
        hole=0.3
    )
    fig_pays.update_traces(textinfo='percent')
    st.plotly_chart(fig_pays, use_container_width=True)
    st.write("Les entreprises am√©ricaines sont nettement sur repr√©sent√©es.")


    st.subheader("R√©partition par Secteur üè≠")
    secteur = df_filtr√©.groupby('Secteur')['Pond√©ration (%)'].sum().reset_index()
    fig_secteur = px.pie(secteur, values='Pond√©ration (%)', names='Secteur', title='R√©partition par secteur', hole=0.3)
    st.plotly_chart(fig_secteur, use_container_width=True)


    st.write("On observe une assez grande diversit√© quant √† la r√©partition sectorielle.")


# === Analyse ESG globale et par secteur ===
st.markdown("<b><u>1√®re partie : Analyse globale ESG :</u></b>", unsafe_allow_html=True)


df = pd.read_excel(uploaded_file, engine='openpyxl', skiprows=7) 


tickers = df.iloc[:, 0].dropna().unique().tolist()
tickers_valides = [str(t).strip() for t in tickers if isinstance(t, str)]  # V√©rifie que c'est une cha√Æne de caract√®res
tickers_clean = [ticker.strip().upper() for ticker in tickers_valides]
# Filtrer les suffixes comme ":xpar"
tickers_clean = [re.sub(r':.*', '', ticker) for ticker in tickers_clean]



try:
    @st.cache_data
    def get_esg_scores(tickers):
        ticker_data = Ticker(tickers)
        return ticker_data.esg_scores
    esg_scores_data = get_esg_scores(tickers)
except Exception as e:
    st.error(f"Erreur lors de la r√©cup√©ration des scores ESG : {e}")
    esg_scores_data = {}

    # V√©rifier chaque ticker et r√©cup√©rer son score ESG
    for ticker in tickers_clean:
        esg_data = get_esg_score(ticker)
        if esg_data is not None:
            esg_scores[ticker] = esg_data
        else:
            st.warning(f"‚ö†Ô∏è Aucun score ESG r√©cup√©r√© pour {ticker}")
        
    # Si aucun score ESG n'a √©t√© r√©cup√©r√©
    if not esg_scores:
        st.warning("‚ö†Ô∏è Aucun score ESG r√©cup√©r√© pour les tickers disponibles.")
    else:
        st.write("Scores ESG r√©cup√©r√©s :")
        st.write(esg_scores)


esg_data_dict = {}


for ticker in tickers:
    esg_info = esg_scores_data.get(ticker, None)
    if isinstance(esg_info, dict):
        esg_score = esg_info.get("totalEsg")
        e_score = esg_info.get("environmentScore")
        s_score = esg_info.get("socialScore")
        g_score = esg_info.get("governanceScore")


        try:
            stock = yf.Ticker(ticker)
            hist = stock.history(period="1y")
            rendement = (hist["Close"].iloc[-1] / hist["Close"].iloc[0] - 1) * 100 if not hist.empty else None
        except Exception:
            rendement = None


        if esg_score is not None:
            esg_data_dict[ticker] = {
                "esg": esg_score,
                "e": e_score,
                "s": s_score,
                "g": g_score,
                "rendement": rendement
            }


if not esg_data_dict:
    st.warning("‚ö†Ô∏è Aucun score ESG r√©cup√©r√© pour les tickers disponibles.")
    st.stop()


esg_scores = [data["esg"] for data in esg_data_dict.values()]
moyenne_esg = sum(esg_scores) / len(esg_scores)
st.success(f"**Score ESG moyen du fonds : {moyenne_esg:.2f}**")


def safe_average(lst):
    clean = [x for x in lst if x is not None]
    return sum(clean) / len(clean) if clean else None


secteurs = df.iloc[:, 2].dropna().unique()
secteurs_scores = []


for secteur in secteurs:
    tickers_du_secteur = df[df.iloc[:, 2] == secteur].iloc[:, 0].dropna()
    tickers_du_secteur = [str(t).strip() for t in tickers_du_secteur]


    esg_scores, e_scores, s_scores, g_scores, rendements = [], [], [], [], []


    for ticker in tickers_du_secteur:
        if ticker in esg_data_dict:
            d = esg_data_dict[ticker]
            esg_scores.append(d.get("esg"))
            e_scores.append(d.get("e"))
            s_scores.append(d.get("s"))
            g_scores.append(d.get("g"))
            if d.get("rendement") is not None:
                rendements.append(d.get("rendement"))


    if esg_scores:
        secteurs_scores.append([
            secteur,
            safe_average(esg_scores),
            safe_average(e_scores),
            safe_average(s_scores),
            safe_average(g_scores),
            safe_average(rendements),
            len([x for x in esg_scores if x is not None])
        ])


secteurs_df = pd.DataFrame(
    secteurs_scores,
    columns=["Secteur", "Score ESG moyen", "Score E moyen", "Score S moyen", "Score G moyen", "Rendement moyen (%)", "Nombre d'entreprises"]
)


st.dataframe(secteurs_df)


st.subheader("Classement des secteurs selon le score ESG")


# Trie des secteurs du meilleur au pire (du plus bas au plus haut ESG)
secteurs_df_sorted = secteurs_df.sort_values(by="Score ESG moyen", ascending=True)


# Cr√©ation du graphique Plotly
fig_secteurs = px.bar(
    secteurs_df_sorted,
    x="Score ESG moyen",
    y="Secteur",
    orientation='h',
    color="Score ESG moyen",
    color_continuous_scale="RdYlGn_r",
    text=secteurs_df_sorted["Score ESG moyen"].apply(lambda x: f"{x:.2f}")
)


fig_secteurs.update_layout(
    title_text=None,
    xaxis_title="Score ESG moyen",
    yaxis_title="Secteur",
    title_x=0.5,
    height=400
)


fig_secteurs.update_traces(textposition='outside')


st.plotly_chart(fig_secteurs, use_container_width=True)




st.write("""
Cette premi√®re analyse du fonds nous permet de r√©aliser une premi√®re conclusion.
Bien que le fonds iShares MSCI World SRI UCITS ETF mette en avant des crit√®res ESG exigeants, son approche demeure largement perfectible. La composition du portefeuille reste domin√©e par de grandes multinationales g√©n√©ralistes comme Microsoft, Apple ou Nestl√©, qui, malgr√© de bonnes notations ESG, sont r√©guli√®rement critiqu√©es pour leurs impacts environnementaux et sociaux, tels que la consommation excessive de ressources ou des pratiques de cha√Æne d‚Äôapprovisionnement controvers√©es.
Si le fonds applique bien une logique d‚Äôexclusion des secteurs et des acteurs les plus probl√©matiques, il ne cible pas sp√©cifiquement des entreprises √† impact positif. Il se limite √† un filtrage relatif plut√¥t qu'√† une v√©ritable dynamique de transformation vers un mod√®le durable.
Par ailleurs, la strat√©gie du fonds repose essentiellement sur des notations externes, souvent fond√©es sur des donn√©es auto-d√©clar√©es ou incompl√®tes. Cela soul√®ve des interrogations quant √† la fiabilit√© et √† la profondeur r√©elle de l‚Äôanalyse ESG effectu√©e.
L‚Äôabsence d‚Äôalignement significatif avec la taxonomie verte europ√©enne et le manque d‚Äôengagement direct aupr√®s des entreprises renforcent encore ces limites. Le fonds se contente de r√©pliquer passivement son indice de r√©f√©rence sans dialogue actif avec les soci√©t√©s en portefeuille.
Finalement, malgr√© ses ambitions affich√©es, ce fonds semble davantage r√©pondre √† une logique de conformit√© r√©glementaire et d‚Äôimage que s‚Äôinscrire dans une v√©ritable strat√©gie d‚Äôinvestissement durable et de soutien actif √† la transition √©cologique.
""")


if not secteurs_df.empty:
    secteurs_df_sorted = secteurs_df.sort_values(by="Score ESG moyen", ascending=True)
    meilleur_secteur = secteurs_df_sorted.iloc[0]      # Score ESG le plus bas
    pire_secteur = secteurs_df_sorted.iloc[-1]         # Score ESG le plus haut


    st.markdown("<b><u>2√®me partie : Analyse sectorielle :</u></b>", unsafe_allow_html=True)
    st.write(f"‚úÖ **Secteur le plus vertueux** : **{meilleur_secteur['Secteur']}** avec un score ESG moyen de **{meilleur_secteur['Score ESG moyen']:.2f}**")
  
    st.write(""" Bien que ne repr√©sentant qu'une tr√®s faible proportion dans le fonds, le secteur immobilier est souvent per√ßu comme l‚Äôun des plus vertueux en mati√®re ESG car il dispose de leviers d‚Äôam√©lioration tr√®s concrets et imm√©diats.
           L‚Äôefficacit√© √©nerg√©tique des b√¢timents peut √™tre am√©lior√©e rapidement gr√¢ce √† des r√©novations, l‚Äôutilisation de mat√©riaux durables et l‚Äôadoption de normes environnementales reconnues (comme HQE, BREEAM ou LEED).
           De plus, le cadre r√©glementaire est de plus en plus strict, notamment en Europe, o√π les r√©glementations thermiques et environnementales imposent des seuils ambitieux de performance √©nerg√©tique.
           Les entreprises du secteur ont ainsi tout int√©r√™t √† s‚Äôadapter pour rester comp√©titives et attirer des investisseurs sensibles aux crit√®res ESG.
           Par ailleurs, les impacts sociaux et de gouvernance sont g√©n√©ralement moins expos√©s que dans d‚Äôautres secteurs : la cha√Æne d‚Äôapprovisionnement est plus locale et ma√Ætris√©e, et les risques de controverses majeures (droits humains, travail forc√©) sont plus faibles que dans les industries extractives ou manufacturi√®res.""")
  
    st.write(f"‚ö†Ô∏è **Secteur le moins vertueux** : **{pire_secteur['Secteur']}** avec un score ESG moyen de **{pire_secteur['Score ESG moyen']:.2f}**")


    st.write(""" Le secteur de l‚Äô√©nergie, √† l‚Äôinverse, est structurellement d√©savantag√© dans les notations ESG du fait de sa d√©pendance historique aux √©nergies fossiles.
            M√™me si de nombreux acteurs commencent √† investir dans les √©nergies renouvelables, le c≈ìur de leur activit√© repose encore largement sur l‚Äôextraction, la transformation et la distribution de p√©trole, de gaz et de charbon ‚Äî activit√©s fortement √©mettrices de gaz √† effet de serre.
            La transition √©nerg√©tique dans ce secteur est complexe, co√ªteuse et progressive, ce qui limite √† court terme l'am√©lioration des performances ESG.
            En parall√®le, le secteur est confront√© √† de nombreuses controverses, qu‚Äôelles soient environnementales (pollutions, mar√©es noires, atteintes √† la biodiversit√©) ou sociales (atteintes aux droits des populations locales, conditions de travail dans les zones d‚Äôextraction).
            Enfin, certains grands groupes √©nerg√©tiques continuent de financer des activit√©s ou de mener des actions de lobbying d√©favorables √† la transition √©cologique, ce qui p√©nalise encore davantage leurs scores ESG.""")


   # Fonction d'analyse d√©taill√©e secteur
    def analyse_secteur(titre, secteur_cible, phrase_personnalisee):
        st.markdown(f"### üîç D√©tail des entreprises du secteur **{secteur_cible}**")
        entreprises = df[df.iloc[:, 2] == secteur_cible]
        entreprises_scores = []


        for _, row in entreprises.iterrows():
            ticker = str(row[0]).strip()
            if ticker in esg_data_dict:
                d = esg_data_dict[ticker]
                entreprises_scores.append([
                    ticker,
                    d.get("esg"),
                    d.get("e"),
                    d.get("s"),
                    d.get("g"),
                    d.get("rendement"),
                    row['Lieu'] 
                ])


        entreprises_df = pd.DataFrame(
            entreprises_scores,
            columns=["Entreprise", "Score ESG", "Score E", "Score S", "Score G", "Rendement sur 1 an (%)", "Pays"]
        )


        st.dataframe(entreprises_df)


        if not entreprises_df.empty:
            entreprises_df_sorted = entreprises_df.sort_values(by="Score ESG", ascending=True)
            fig = px.bar(
                entreprises_df_sorted,
                x="Score ESG",
                y="Entreprise",
                orientation='h',
                color="Score ESG",
                color_continuous_scale="RdYlGn_r",
                title=f"{titre} ‚Äî Score ESG par entreprise (plus le score est bas, meilleure est la performance ESG)",
                category_orders={'Entreprise': entreprises_df_sorted['Entreprise'].tolist()}
            )    
            st.plotly_chart(fig, use_container_width=True)


            # ‚úÖ Phrase personnalis√©e
            st.markdown(f"üìù {phrase_personnalisee}")


           # ‚úÖ D√©composition E/S/G du secteur
            score_e_moy = entreprises_df['Score E'].mean()
            score_s_moy = entreprises_df['Score S'].mean()
            score_g_moy = entreprises_df['Score G'].mean()


            st.markdown(f"### üß© D√©composition du score ESG global du secteur **{secteur_cible}**")
            st.write(f"- **Score E (Environnemental)** : {score_e_moy:.2f}")
            st.write(f"- **Score S (Social)** : {score_s_moy:.2f}")
            st.write(f"- **Score G (Gouvernance)** : {score_g_moy:.2f}")
            st.write("A noter que le score ESG total n'est pas une moyenne des trois scores. Cela s'explique par la pond√©ration diff√©rente des facteurs et l'int√©gration d'autres √©l√©ments tels que le niveau de controverse qui peuvent augmenter ou diminuer le score total.‚Äã")
  


           # ‚úÖ Camembert r√©partition g√©ographique
            st.markdown(f"### üåç R√©partition g√©ographique des entreprises du secteur **{secteur_cible}**")
            pays_repartition = entreprises_df['Pays'].value_counts().reset_index()
            pays_repartition.columns = ['Pays', 'Nombre d\'entreprises']
            fig_pie = px.pie(
                pays_repartition,
                values='Nombre d\'entreprises',
                names='Pays',
                title=f"R√©partition g√©ographique du secteur {secteur_cible}",
                hole=0.3
            )
            st.plotly_chart(fig_pie, use_container_width=True)


   # Analyse du secteur le plus vertueux
    analyse_secteur(
        "üåü Secteur le plus vertueux",
        meilleur_secteur['Secteur'],
        "L'entreprise ayant la meilleure performance extra financi√®re est le groupe CBRE avec un score ESG de 8,96. "
        "A l'inverse, la moins bonne performance extra financi√®re est r√©alis√©e par l'entreprise canadienne FirstService avec un score ESG de 15,96 "
        "soit une meilleure performance que la 'meilleure' entreprise du secteur de l'√ânergie."
    )


   # Analyse du secteur le moins vertueux
    analyse_secteur(
        "üö® Secteur le moins vertueux",
        pire_secteur['Secteur'],
        "L'entreprise ayant la meilleure performance extra financi√®re est Baker Hughes avec un score ESG de 19,12. "
        "A l'inverse, la moins bonne performance extra financi√®re est r√©alis√©e par l'entreprise am√©ricaine Phillips Energy avec un score ESG de 35,92."
    )


else:
    st.warning("Aucun secteur disponible pour l'analyse.")






# Reconstruction du portefeuille personnalis√©




st.markdown("<b><u>3√®me partie : Simulation de reconstruction du portefeuille</u></b>", unsafe_allow_html=True)
st.markdown("Les deux premi√®res parties du projet nous ont permis de mieux comprendre le fonds et notamment d'observer le secteur le plus performant ainsi que le moins performant."
        
"Dans cette derni√®re partie, nous utilisons nos observations pr√©c√©dentes afin de construire un portefeuille plus performant vis-√†-vis des crit√®res ESG. "




"Si le secteur √ânergie est choisi, nous laissons la possibilit√© d'exclure certaines entreprises. Nous avons fait la m√™me chose pour le secteur des mat√©riaux qui regroupe plus d'entreprises et qui est le deuxi√®me secteur de notre fonds ayant le pire score ESG "




"Enfin, nous comparons ce nouveau portefeuille avec la performance ESG du fonds de d√©part. ")




# Initialisation de la session state
if 'secteurs_selectionnes' not in st.session_state:
    st.session_state['secteurs_selectionnes'] = []




if 'entreprises_selectionnees_energie' not in st.session_state:
    st.session_state['entreprises_selectionnees_energie'] = []




# üìã FORMULAIRE
with st.form("form_portefeuille"):
  # 1Ô∏è‚É£ S√©lection des secteurs
    secteurs_disponibles = df['Secteur'].dropna().unique().tolist()
    secteurs_selectionnes = st.multiselect(
        "S√©lectionnez les secteurs que vous souhaitez inclure dans votre portefeuille :",
        secteurs_disponibles,
        default=st.session_state['secteurs_selectionnes']
    )


  # Sauvegarde temporaire dans la session
    st.session_state['secteurs_selectionnes'] = secteurs_selectionnes


  # 2Ô∏è‚É£ Si "√ânergie" est dans les secteurs s√©lectionn√©s, afficher la s√©lection des entreprises
    secteur_energie = next((sect for sect in secteurs_selectionnes if "ener" in sect.lower()), None)
    secteur_materiaux = next((sect for sect in secteurs_selectionnes if "mat√©riaux" in sect.lower() or "materiaux" in sect.lower()), None)


    entreprises_selectionnees_energie = []
    entreprises_selectionnees_materiaux = []


    if secteur_energie:
        entreprises_energie = df[df['Secteur'] == secteur_energie].iloc[:, 0].dropna().unique().tolist()
        entreprises_selectionnees_energie = st.multiselect(
            f"S√©lectionnez les entreprises √† inclure dans le secteur {secteur_energie} :",
            entreprises_energie,
            default=entreprises_energie
        )
        st.session_state['entreprises_selectionnees_energie'] = entreprises_selectionnees_energie


    if secteur_materiaux:
        entreprises_materiaux = df[df['Secteur'] == secteur_materiaux].iloc[:, 0].dropna().unique().tolist()
        entreprises_selectionnees_materiaux = st.multiselect(
            f"S√©lectionnez les entreprises √† inclure dans le secteur {secteur_materiaux} :",
            entreprises_materiaux,
            default=entreprises_materiaux
        )
        st.session_state['entreprises_selectionnees_materiaux'] = entreprises_selectionnees_materiaux


  # üìç Bouton de validation du formulaire
    submit = st.form_submit_button("Construire le portefeuille")


# üöÄ Calcul uniquement apr√®s soumission du formulaire
if submit:


    if not secteurs_selectionnes:
        st.warning("‚ö†Ô∏è Veuillez s√©lectionner au moins un secteur pour construire le portefeuille.")
    else:
        entreprises_selectionnees = []


      # Collecte des entreprises des autres secteurs (hors √©nergie et mat√©riaux)
        autres_secteurs = [sect for sect in secteurs_selectionnes if sect not in [secteur_energie, secteur_materiaux]]
        entreprises_autres = df[df['Secteur'].isin(autres_secteurs)].iloc[:, 0].dropna().unique().tolist()


      # Finalisation des entreprises
        entreprises_selectionnees.extend(entreprises_autres)
        entreprises_selectionnees.extend(st.session_state.get('entreprises_selectionnees_energie', []))
        entreprises_selectionnees.extend(st.session_state.get('entreprises_selectionnees_materiaux', []))


      # Filtrage final
        df_personnalise = df[df.iloc[:, 0].isin(entreprises_selectionnees)]


        if df_personnalise.empty:
            st.warning("‚ö†Ô∏è Aucun titre s√©lectionn√© dans votre portefeuille personnalis√©.")
        else:
            esg_personnalise = []
            for _, row in df_personnalise.iterrows():
                ticker = str(row[0]).strip()
                if ticker in esg_data_dict:
                    d = esg_data_dict[ticker]
                    esg_personnalise.append({
                        "Ticker": ticker,
                        "Secteur": row['Secteur'],
                        "Score ESG": d.get("esg"),
                        "Score E": d.get("e"),
                        "Score S": d.get("s"),
                        "Score G": d.get("g"),
                        "Rendement (%)": d.get("rendement")
                    })


            df_esg_personnalise = pd.DataFrame(esg_personnalise)


            if df_esg_personnalise.empty:
                st.warning("‚ö†Ô∏è Aucun score ESG disponible pour les entreprises s√©lectionn√©es.")
            else:
                st.markdown("### üåø Performance du portefeuille personnalis√©")


                score_esg_moyen = df_esg_personnalise['Score ESG'].mean()
                score_e_moyen = df_esg_personnalise['Score E'].mean()
                score_s_moyen = df_esg_personnalise['Score S'].mean()
                score_g_moyen = df_esg_personnalise['Score G'].mean()
                rendement_moyen = df_esg_personnalise['Rendement (%)'].mean()


                st.success(f"**Score ESG moyen du portefeuille personnalis√© : {score_esg_moyen:.2f}**")
                st.write(f"- Score E moyen : {score_e_moyen:.2f}")
                st.write(f"- Score S moyen : {score_s_moyen:.2f}")
                st.write(f"- Score G moyen : {score_g_moyen:.2f}")
                if rendement_moyen is not None:
                    st.write(f"- Rendement moyen : {rendement_moyen:.2f}%")


                # Comparaison avec le portefeuille initial
                st.markdown("### ‚öñÔ∏è Comparaison avec le portefeuille initial")
                ecart_esg = score_esg_moyen - moyenne_esg
                if ecart_esg < 0:
                    st.success(f"‚úÖ Am√©lioration ESG de {abs(ecart_esg):.2f} points par rapport au portefeuille initial.")
                else:
                    st.warning(f"‚ö†Ô∏è D√©gradation ESG de {ecart_esg:.2f} points par rapport au portefeuille initial.")



# Comparaison avec le portefeuille initial
                ecart_esg = score_esg_moyen - moyenne_esg
                rendement_moyen = rendement_moyen if rendement_moyen is not None else 0  # G√©rer les valeurs manquantes

                # Affichage des r√©sultats calcul√©s (d√©j√† sur le doc) 
                st.success(f"**Score ESG moyen du portefeuille personnalis√© : {score_esg_moyen:.2f}**")
                st.write(f"- Score E moyen : {score_e_moyen:.2f}")
                st.write(f"- Score S moyen : {score_s_moyen:.2f}")
                st.write(f"- Score G moyen : {score_g_moyen:.2f}")
                st.write(f"- Rendement moyen : {rendement_moyen:.2f}%")

                # Commentaires
            st.markdown(f"""
            Dans cette derni√®re √©tape, vous avez choisi de composer votre portefeuille √† partir des secteurs {', '.join(secteurs_selectionnes)}.
                
            Cette personnalisation a conduit √† un portefeuille affichant un score ESG moyen de **{score_esg_moyen:.2f}**, soit une {'l√©g√®re d√©gradation' if ecart_esg > 0 else 'am√©lioration'} de **{abs(ecart_esg):.2f}** points par rapport au portefeuille initial.
                
            Le rendement moyen obtenu est de **{rendement_moyen:.2f}%**, ce qui reste {'en dessous' if rendement_moyen < 0 else 'au-dessus'} du portefeuille optimal identifi√© pr√©c√©demment, d√©montrant que le choix des entreprises, m√™me au sein de secteurs pertinents, peut impacter significativement la performance financi√®re tout en ne garantissant pas n√©cessairement une am√©lioration ESG.
                
            De mani√®re plus g√©n√©rale, notre analyse met en √©vidence une tension persistante entre performance financi√®re et durabilit√©. Alors que certains secteurs parviennent √† combiner scores ESG √©lev√©s et rendements solides, d‚Äôautres affichent de tr√®s bonnes performances financi√®res malgr√© de faibles scores ESG. Cette dualit√© souligne l‚Äôimportance d‚Äôun arbitrage √©clair√© entre impact durable et objectifs de rentabilit√©. La construction d‚Äôun portefeuille optimal n√©cessite donc non seulement une s√©lection sectorielle rigoureuse, mais aussi une analyse fine au niveau des entreprises pour concilier ces deux dimensions.
            """)

